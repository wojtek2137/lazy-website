{"version":3,"file":"static/js/666.ece3608f.chunk.js","mappings":"wIAQA,MAAMA,EAKJC,WAAAA,GAAe,KAJPC,eAAkD,KAAK,KACvDC,aAAc,EAAM,KACpBC,eAAmD,KAGzDC,KAAKC,MACP,CAEA,UAAcA,GAEZD,KAAKE,2BAGCF,KAAKG,wBAGXH,KAAKI,qBAGLJ,KAAKK,wBAELC,QAAQC,IAAI,+CACd,CAGA,2BAAcJ,GACZ,GAAI,kBAAmBK,UACrB,IACE,MAAMC,QAAqBD,UAAUE,cAAcC,SAAS,UAC5DX,KAAKD,eAAiBU,EAEtBH,QAAQC,IAAI,2DAAkDE,GAG9DA,EAAaG,iBAAiB,cAAe,KAC3C,MAAMC,EAAYJ,EAAaK,WAC3BD,GACFA,EAAUD,iBAAiB,cAAe,KAChB,cAApBC,EAAUE,OAAyBP,UAAUE,cAAcM,YAC7DhB,KAAKiB,4BAMf,CAAE,MAAOC,GACPZ,QAAQY,MAAM,wDAA+CA,EAC/D,CAEJ,CAGQhB,kBAAAA,IAEFiB,OAAOC,WAAW,8BAA8BC,SAC/CF,OAAOX,UAAkBc,cAC5BtB,KAAKF,aAAc,EACnBQ,QAAQC,IAAI,sDAEhB,CAGQH,kBAAAA,GAKNe,OAAOP,iBAAiB,eAAgB,KACtCN,QAAQC,IAAI,iEACZP,KAAKF,aAAc,GAEvB,CAGQyB,iBAAAA,GAGNjB,QAAQC,IAAI,kFACd,CAGQiB,iBAAAA,GAENlB,QAAQC,IAAI,gFACd,CAGA,mBAAckB,GAEZnB,QAAQC,IAAI,yEACd,CAGQU,sBAAAA,GAAgC,IAADS,EAAAC,EACrC,MAAMC,EAAeC,SAASC,cAAc,OAC5CF,EAAaG,GAAK,0BAClBH,EAAaI,UAAS,29BA6BtBJ,EAAaK,MAAMC,QAAO,kXAiB1B,MAAMD,EAAQJ,SAASC,cAAc,SACrCG,EAAME,YAAW,oMAMjBN,SAASO,KAAKC,YAAYJ,GAE1BJ,SAASS,KAAKD,YAAYT,GAGkB,QAA5CF,EAAAG,SAASU,eAAe,4BAAoB,IAAAb,GAA5CA,EAA8Cd,iBAAiB,QAAS,KACtEZ,KAAKwC,gBAIsC,QAA7Cb,EAAAE,SAASU,eAAe,6BAAqB,IAAAZ,GAA7CA,EAA+Cf,iBAAiB,QAAS,KACvEgB,EAAaa,WAIfC,WAAW,KACLd,EAAae,YACff,EAAaa,UAEd,IACL,CAGQD,WAAAA,GAAqB,IAADI,EACH,QAAvBA,EAAI5C,KAAKD,sBAAc,IAAA6C,GAAnBA,EAAqBC,UACvB7C,KAAKD,eAAe8C,QAAQC,YAAY,CAAEC,KAAM,iBAChD5B,OAAO6B,SAASC,SAEpB,CAGQC,yBAAAA,GAEN5C,QAAQC,IAAI,uFACd,CAGQF,qBAAAA,GACN,MAAM8C,EAAoBA,KACxB,MAAMC,EAAYvB,SAASC,cAAc,OACzCsB,EAAUrB,GAAK,oBACfqB,EAAUpB,UAAS,4MAMnBoB,EAAUnB,MAAMC,QAAO,qRAcvBL,SAASS,KAAKD,YAAYe,GAC1BvB,SAASS,KAAKL,MAAMoB,WAAa,QAWnClC,OAAOP,iBAAiB,SARE0C,KACxB,MAAMF,EAAYvB,SAASU,eAAe,qBACtCa,IACFA,EAAUX,SACVZ,SAASS,KAAKL,MAAMoB,WAAa,OAKrClC,OAAOP,iBAAiB,UAAWuC,GAG9B3C,UAAU+C,QACbJ,GAEJ,CAGOK,cAAAA,GACLlD,QAAQC,IAAI,0EACd,CAGOkD,UAAAA,GAEL,OADAnD,QAAQC,IAAI,0EACL,CACT,CAGOmD,gBAAAA,GACL,OAAO1D,KAAKF,WACd,EAKFQ,QAAQC,IAAI,qFAGXY,OAAexB,iBAAmBA,EAEnC,S","sources":["pwa.ts"],"sourcesContent":["// PWA functionality for Lazy Swing Band\n// Enhanced Progressive Web App features\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed'; platform: string }>;\n}\n\nclass LazySwingBandPWA {\n  private deferredPrompt: BeforeInstallPromptEvent | null = null;\n  private isInstalled = false;\n  private swRegistration: ServiceWorkerRegistration | null = null;\n\n  constructor() {\n    this.init();\n  }\n\n  private async init() {\n    // Check if already installed\n    this.checkInstallStatus();\n    \n    // Register Service Worker\n    await this.registerServiceWorker();\n    \n    // Setup install prompt\n    this.setupInstallPrompt();\n    \n    // Setup offline indicator\n    this.setupOfflineIndicator();\n    \n    console.log('ðŸŽµ Lazy Swing Band PWA initialized');\n  }\n\n  // Register Service Worker\n  private async registerServiceWorker(): Promise<void> {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.register('/sw.js');\n        this.swRegistration = registration;\n        \n        console.log('ðŸŽ· PWA: Service Worker registered successfully', registration);\n        \n        // Listen for updates\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                this.showUpdateNotification();\n              }\n            });\n          }\n        });\n\n      } catch (error) {\n        console.error('ðŸš« PWA: Service Worker registration failed:', error);\n      }\n    }\n  }\n\n  // Check if app is already installed\n  private checkInstallStatus(): void {\n    // Check if running in standalone mode (installed)\n    if (window.matchMedia('(display-mode: standalone)').matches || \n        (window.navigator as any).standalone) {\n      this.isInstalled = true;\n      console.log('ðŸ“± PWA: App is running in installed mode');\n    }\n  }\n\n  // Setup install prompt functionality (disabled - now handled by React components)\n  private setupInstallPrompt(): void {\n    // Install prompt is now handled by React components\n    // Old implementation disabled to prevent conflicts\n    \n    // Still listen for app installation for analytics\n    window.addEventListener('appinstalled', () => {\n      console.log('ðŸŽµ PWA: Lazy Swing Band app installed successfully!');\n      this.isInstalled = true;\n    });\n  }\n\n  // Show install button (disabled - now handled by React components)\n  private showInstallButton(): void {\n    // Install button is now handled by React components\n    // Old implementation disabled to prevent conflicts\n    console.log('ðŸŽµ PWA: Install button creation skipped - handled by React components');\n  }\n\n  // Hide install button (disabled - now handled by React components)\n  private hideInstallButton(): void {\n    // Install button is now handled by React components\n    console.log('ðŸŽµ PWA: Install button hiding skipped - handled by React components');\n  }\n\n  // Prompt installation (disabled - now handled by React components)\n  private async promptInstall(): Promise<void> {\n    // Install prompt is now handled by React components\n    console.log('ðŸŽµ PWA: Install prompt skipped - handled by React components');\n  }\n\n  // Show update notification\n  private showUpdateNotification(): void {\n    const notification = document.createElement('div');\n    notification.id = 'pwa-update-notification';\n    notification.innerHTML = `\n      <div style=\"display: flex; align-items: center; justify-content: space-between; gap: 15px;\">\n        <div>\n          <strong>ðŸŽµ Nowa wersja dostÄ™pna!</strong><br>\n          <small>OdÅ›wieÅ¼ stronÄ™ aby zaÅ‚adowaÄ‡ najnowszÄ… wersjÄ™</small>\n        </div>\n        <div>\n          <button id=\"pwa-update-button\" style=\"\n            background: #ccb379;\n            color: #000;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 20px;\n            font-weight: bold;\n            cursor: pointer;\n            margin-right: 8px;\n          \">OdÅ›wieÅ¼</button>\n          <button id=\"pwa-update-dismiss\" style=\"\n            background: transparent;\n            color: #fff;\n            border: 1px solid #666;\n            padding: 8px 16px;\n            border-radius: 20px;\n            cursor: pointer;\n          \">PÃ³Åºniej</button>\n        </div>\n      </div>\n    `;\n    \n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: rgba(0, 0, 0, 0.9);\n      color: white;\n      padding: 16px 24px;\n      border-radius: 12px;\n      border: 1px solid #ccb379;\n      z-index: 10000;\n      max-width: 400px;\n      font-family: inherit;\n      animation: slideDown 0.3s ease;\n    `;\n\n    // Add animation\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes slideDown {\n        from { transform: translateX(-50%) translateY(-100%); opacity: 0; }\n        to { transform: translateX(-50%) translateY(0); opacity: 1; }\n      }\n    `;\n    document.head.appendChild(style);\n\n    document.body.appendChild(notification);\n\n    // Handle update button\n    document.getElementById('pwa-update-button')?.addEventListener('click', () => {\n      this.applyUpdate();\n    });\n\n    // Handle dismiss button\n    document.getElementById('pwa-update-dismiss')?.addEventListener('click', () => {\n      notification.remove();\n    });\n\n    // Auto-hide after 10 seconds\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.remove();\n      }\n    }, 10000);\n  }\n\n  // Apply update\n  private applyUpdate(): void {\n    if (this.swRegistration?.waiting) {\n      this.swRegistration.waiting.postMessage({ type: 'SKIP_WAITING' });\n      window.location.reload();\n    }\n  }\n\n  // Show installed notification (disabled - now handled by React components)\n  private showInstalledNotification(): void {\n    // Install success notification is now handled by React components\n    console.log('ðŸŽµ PWA: Install success notification skipped - handled by React components');\n  }\n\n  // Setup offline indicator\n  private setupOfflineIndicator(): void {\n    const showOfflineStatus = () => {\n      const indicator = document.createElement('div');\n      indicator.id = 'offline-indicator';\n      indicator.innerHTML = `\n        <div style=\"display: flex; align-items: center; gap: 8px;\">\n          ðŸ“µ <span>Tryb offline - niektÃ³re funkcje mogÄ… byÄ‡ niedostÄ™pne</span>\n        </div>\n      `;\n      \n      indicator.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        background: #e74c3c;\n        color: white;\n        padding: 8px;\n        text-align: center;\n        z-index: 9998;\n        font-family: inherit;\n        font-size: 14px;\n      `;\n      \n      document.body.appendChild(indicator);\n      document.body.style.paddingTop = '40px';\n    };\n\n    const hideOfflineStatus = () => {\n      const indicator = document.getElementById('offline-indicator');\n      if (indicator) {\n        indicator.remove();\n        document.body.style.paddingTop = '0';\n      }\n    };\n\n    window.addEventListener('online', hideOfflineStatus);\n    window.addEventListener('offline', showOfflineStatus);\n\n    // Check initial state\n    if (!navigator.onLine) {\n      showOfflineStatus();\n    }\n  }\n\n  // Public method to manually trigger install prompt (disabled - now handled by React components)\n  public triggerInstall(): void {\n    console.log('ðŸŽµ PWA: Install trigger skipped - handled by React components');\n  }\n\n  // Public method to check if app can be installed (disabled - now handled by React components)\n  public canInstall(): boolean {\n    console.log('ðŸŽµ PWA: Install check skipped - handled by React components');\n    return false;\n  }\n\n  // Public method to check if app is installed (disabled - now handled by React components)\n  public getInstallStatus(): boolean {\n    return this.isInstalled;\n  }\n}\n\n// PWA initialization disabled - now handled by React components\n// The old initialization has been replaced with React-based PWA management\nconsole.log('ðŸŽµ PWA: Old PWA initialization skipped - using React components instead');\n\n// Export for potential manual usage\n(window as any).LazySwingBandPWA = LazySwingBandPWA;\n\nexport default LazySwingBandPWA;\n"],"names":["LazySwingBandPWA","constructor","deferredPrompt","isInstalled","swRegistration","this","init","checkInstallStatus","registerServiceWorker","setupInstallPrompt","setupOfflineIndicator","console","log","navigator","registration","serviceWorker","register","addEventListener","newWorker","installing","state","controller","showUpdateNotification","error","window","matchMedia","matches","standalone","showInstallButton","hideInstallButton","promptInstall","_document$getElementB","_document$getElementB2","notification","document","createElement","id","innerHTML","style","cssText","textContent","head","appendChild","body","getElementById","applyUpdate","remove","setTimeout","parentNode","_this$swRegistration","waiting","postMessage","type","location","reload","showInstalledNotification","showOfflineStatus","indicator","paddingTop","hideOfflineStatus","onLine","triggerInstall","canInstall","getInstallStatus"],"sourceRoot":""}